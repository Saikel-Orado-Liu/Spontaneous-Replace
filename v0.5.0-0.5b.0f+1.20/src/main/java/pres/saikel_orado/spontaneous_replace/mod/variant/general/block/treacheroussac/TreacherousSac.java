package pres.saikel_orado.spontaneous_replace.mod.variant.general.block.treacheroussac;import net.minecraft.block.Block;import net.minecraft.block.BlockState;import net.minecraft.block.Blocks;import net.minecraft.entity.AreaEffectCloudEntity;import net.minecraft.entity.Entity;import net.minecraft.entity.LivingEntity;import net.minecraft.entity.player.PlayerEntity;import net.minecraft.entity.projectile.PersistentProjectileEntity;import net.minecraft.entity.projectile.ProjectileEntity;import net.minecraft.item.AxeItem;import net.minecraft.item.Item;import net.minecraft.item.ItemStack;import net.minecraft.server.world.ServerWorld;import net.minecraft.stat.Stats;import net.minecraft.util.ActionResult;import net.minecraft.util.Hand;import net.minecraft.util.hit.BlockHitResult;import net.minecraft.util.math.BlockPos;import net.minecraft.world.World;import net.minecraft.world.explosion.Explosion;import org.jetbrains.annotations.Nullable;import java.util.Random;import static pres.saikel_orado.spontaneous_replace.mod.data.SRData.POS_SHIFTING;import static pres.saikel_orado.spontaneous_replace.mod.variant.general.data.SRVariantData.TREACHEROUS_PLANT_STABILITY;/** * <b style="color:FFC800"><font size="+2">TreacherousSac：诡谲囊</font></b> * <p><i><b style="color:FFC800"><font size="+1">一种被感染的原木类方块</font></b></i></p> * <style="color:FFC800"> * * @author 刘 Saikel Orado 又称 “游戏极客-Saikel” * <p>Saikel Orado Liu aka ”GameGeek-Saikel“</p> * @version 1.0 * | 创建于 2023/7/18 23:56 */@SuppressWarnings("deprecation")public class TreacherousSac extends Block {    public static final int TREACHEROUS_SAC_LUMINANCE = 5;    public TreacherousSac(Settings settings) {        super(settings);    }    /**     * 随机酸气粒子效果     */    @Override    public void randomDisplayTick(BlockState state, World world, BlockPos pos, net.minecraft.util.math.random.Random random) {        super.randomDisplayTick(state, world, pos, random);        if (random.nextInt(3) == 0) {            java.util.Random randomValue = new java.util.Random();            int color = 0xFF6A00;            world.addParticle(new AreaEffectCloudEntity(world, 0, 0, 0).getParticleType(),                    pos.getX() + POS_SHIFTING + randomValue.nextDouble(-0.5, 0.5),                    pos.getY() + POS_SHIFTING + randomValue.nextDouble(-0.5, 0.5),                    pos.getZ() + POS_SHIFTING + randomValue.nextDouble(-0.5, 0.5),                    (float) (color >> 16 & 255) / 255.0F,                    (float) (color >> 8 & 255) / 255.0F,                    (float) (0) / 255.0F);        }    }    /**     * 如果在爆炸中被摧毁则继续爆炸产生连锁反应     */    @Override    public void onDestroyedByExplosion(World world, BlockPos pos, Explosion explosion) {        if (!world.isClient) sacUnstable(world, pos);    }    /**     * 如果在方块上跳跃则有概率会爆炸     */    @Override    public void onLandedUpon(World world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {        if (!world.isClient && world.random.nextFloat() < fallDistance - 0.5F                && entity instanceof LivingEntity                && entity.getWidth() * entity.getWidth() * entity.getHeight() > 0.512F                && new Random().nextInt(TREACHEROUS_PLANT_STABILITY) == 0) {            sacUnstable(world, pos, (LivingEntity) entity);        }        super.onLandedUpon(world, state, pos, entity, fallDistance);    }    /**     * 如果被斧右键使用则会爆炸     */    @Override    public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {        ItemStack stack = player.getStackInHand(hand);        Item item = stack.getItem();        if (item instanceof AxeItem) {            if (!world.isClient) {                stack.damage(1, player, (p) -> p.sendToolBreakStatus(hand));                sacUnstable(world, pos, player);            }            player.incrementStat(Stats.USED.getOrCreateStat(item));            return ActionResult.success(world.isClient);        }        return super.onUse(state, world, pos, player, hand, hit);    }    /**     * 如果被弹射物击中     */    @Override    public void onProjectileHit(World world, BlockState state, BlockHitResult hit, ProjectileEntity projectile) {        BlockPos blockPos = hit.getBlockPos();        Entity entity = projectile.getOwner();        if (projectile instanceof PersistentProjectileEntity && projectile.canModifyAt(world, blockPos)) {            if (!world.isClient)                sacUnstable(world, blockPos, entity instanceof LivingEntity ? (LivingEntity) entity : null);        }    }    /**     * 爆炸不掉落     */    @Override    public boolean shouldDropItemsOnExplosion(Explosion explosion) {        return false;    }    /**     * 诡谲囊爆炸操作     */    public static void sacUnstable(World world, BlockPos pos) {        sacUnstable(world, pos, null);    }    /**     * 诡谲囊爆炸操作     */    protected static void sacUnstable(World world, BlockPos pos, @Nullable LivingEntity detonator) {        world.setBlockState(pos, Blocks.AIR.getDefaultState(), 11);        TreacherousSacEntity treacherousSacEntity = new TreacherousSacEntity(world, detonator);        treacherousSacEntity.refreshPositionAndAngles(pos, 0, 0);        ((ServerWorld) world).spawnEntityAndPassengers(treacherousSacEntity);    }}